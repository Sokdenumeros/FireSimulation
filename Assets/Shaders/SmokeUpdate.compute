// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

int3 dimensions;
int nparticles;

float deltaTime;

float tempfactor;
float velfactor;
float smokfactor;

StructuredBuffer<float> temps1;
StructuredBuffer<float> temps2;
StructuredBuffer<float3> vel1;
StructuredBuffer<float3> vel2;
StructuredBuffer<float> smok1;
StructuredBuffer<float> smok2;

RWStructuredBuffer<float3> positions;
RWStructuredBuffer<float4> colors;

[numthreads(8,8,8)]
void CSMain(uint3 id : SV_GroupThreadID, uint3 groupID : SV_GroupID)
{
    int globalIndex = (int)(groupID.x * 512 + id.x + id.y * 8 + id.z * 64);
    if (globalIndex < nparticles)
    {
        float3 pos = positions[globalIndex] * 100;
        pos = max(pos, float3(0, 0, 0));
        pos = min(pos, float3(61, 121, 61));
        int positionIndex = (int)pos.z * 121 * 61 + (int)pos.y * 61 + (int)pos.x;

        //positions[globalIndex] += ((1 - velfactor) * vel1[positionIndex] + velfactor * vel2[positionIndex]) * deltaTime/2;

        float temp =temps1[positionIndex];
        float opacity =smok1[positionIndex];

        opacity = min(max(opacity/50.0,0),1);
        float transferFunction = min(max((temp*7 - 300) / 1300,0),1);

        float4 c = lerp(float4(0,0,0,1), float4(1, 0.46, 0.008, 1), transferFunction);
        //float4 c = lerp(float4(0,0,0,1), float4(1, 0, 0, 1), min(transferFunction*2,1));
        //c = lerp(c, float4(1, 0.92, 0.016, 1), max(transferFunction*2 - 1, 0));
        c.w *= opacity;

        colors[globalIndex] = c;
    }
}
