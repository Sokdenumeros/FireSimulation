// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

int nparticles;
int3 dimensions;

float deltaTime;

float tempfactor;
float velfactor;
float smokfactor;

StructuredBuffer<uint> pbuffer;
StructuredBuffer<uint> sbuffer;

StructuredBuffer<float> gridx;
StructuredBuffer<float> gridy;
StructuredBuffer<float> gridz;

RWStructuredBuffer<float3> positions;
RWStructuredBuffer<float4> colors;

float random(float2 uv)
{
    //return frac(sin(dot(uv,float2(12.9898,78.233)))*43758.5453123);
    return frac(dot(uv, float2(12.9898, 78.233)) * 43758.5453123);
}

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_GroupThreadID, uint3 groupID : SV_GroupID)
{
    int globalIndex = (int) (groupID.x * 512 + id.x + id.y * 8 + id.z * 64);
    if (globalIndex < nparticles)
    {
        uint x = pbuffer[globalIndex] % dimensions[0];
        uint y = (pbuffer[globalIndex] / dimensions[0]) % dimensions[1];
        uint z = pbuffer[globalIndex] / dimensions[0] / dimensions[1];
        //float3 pos = float3((x * 0.1 - 0.8) * 0.1, (y * 0.1) * 0.1, (16 + z * 0.1) * 0.1);
        float3 pos = float3(gridx[x], gridy[y], gridz[z])*0.1f;
        positions[globalIndex] = pos;
        
        float opacity = float(sbuffer[globalIndex] >> 24);
        float temp = float((sbuffer[globalIndex] << 8) >> 24);
        
        opacity = min(max(opacity / 50.0, 0), 1);
        float transferFunction = min(max((temp * 7 - 300) / 1300, 0), 1);
        float4 c = lerp(float4(0, 0, 0, 1), float4(1, 0.46, 0.008, 1), transferFunction);
        c.w *= opacity / 10;
        colors[globalIndex] = c;
    }
}
