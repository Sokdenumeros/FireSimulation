// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float dimensions[3];
float factor;
float deltaTime;
StructuredBuffer<float> temps1;
StructuredBuffer<float> temps2;
RWStructuredBuffer<float3> positions;
StructuredBuffer<float3> vel1;
StructuredBuffer<float3> vel2;
RWStructuredBuffer<float4> colors;

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID, uint3 groupID : SV_GroupID)
{
    // TODO: insert actual code here!
    uint globalIndex = groupID.x*2+groupID.y;

    /*float3 pos = positions[globalIndex] * 100;
    pos = max(pos, float3(0,0,0));
    pos = min(pos, float3(dimensions[0], dimensions[1], dimensions[2]));
    int positionIndex = int(pos.z) * dimensions[1] * dimensions[0] + int(pos.y) * dimensions[0] + int(pos.x);*/

    //positions[globalIndex] += vel1[positionIndex] * deltaTime;
    //positions[globalIndex] = float3(globalIndex/61/61*0.1, ((globalIndex / 61) % 61)*0.1, (globalIndex % 61)*0.1);
    colors[globalIndex] = float4(0.0, 1.0, 0.0, 1.0);
}
